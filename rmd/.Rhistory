"P-value" =
round(c(summary(fit_l)$effect.pval["te"],summary(fit_l)$effect.pval["cde"],summary(fit_l)$effect.pval["pe"]),2)
)
res_mediation %>%
gt() %>%
cols_label(
X = " ",
Lower.CL = "Lower CL",
Upper.CL = "Upper CL",
P.value = "P-value"
) %>% gt::gtsave(
filename = sprintf("%s/tables/mediation_lockdown_max.html",rootdir))
#to run RMD
# library(rmarkdown)
# rootdir <- system("git rev-parse --show-toplevel", intern=TRUE)[1]
# rmarkdown::render(paste(rootdir,"rmd/ses.Rmd", sep="/"))
options(knitr.table.format = function() {
if (knitr::is_latex_output()) 'latex' else 'pandoc'
})
if (knitr::is_latex_output()) {
knitr::opts_chunk$set(warning=FALSE, message=FALSE, echo=FALSE)
}
library(lfe)
library(stargazer)
library(knitr)
library(plm)
library(latex2exp)
library(ggplot2)
library(ggthemes)
library(mvtnorm)
library(kableExtra)
library(data.table)
library(readxl)
library(dplyr)
library(dotwhisker)
library(latex2exp)
library(parallel)
library(geepack)
library(CMAverse)
library(ggpubr)
library(randomForest)
library(mlbench)
library(caret)
library(e1071)
library(missForest)
library(gtsummary)
library(knitr)
library(gt)
detectCores()
rootdir <- system("git rev-parse --show-toplevel", intern=TRUE)[1]
source(paste(rootdir,"R/countyData.R",sep="/"))
options(timeout=2000)
sdf <- countyData(redo=FALSE) #set redo=TRUE to update
sdf <- countyData(redo=FALSE) #set redo=TRUE to update
#Variable selection
set.seed(12345)
Y = "deaths"
E = "pctPoverty"
M = c(
"Series_Complete_Pop_Pct",
"work"
)
C = c("PropMale",
"PropAbove65",
"no.college.diploma",
"native",
"asian",
"black",
"white",
"hispanic",
"state"
)
d = sdf[c("fips",Y,E,M,C)]
#####Mediation analysis#####
#ref1: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4287269/
#ref2: https://www.igaku-shoin.co.jp/paper/archive/y2021/3447_06#annot
#ref2 code: https://www.igaku-shoin.co.jp/application/files/5216/3781/4240/9R.txt
## CMAverse package
# https://bs1125.github.io/CMAverse/articles/multiple_mediators.html
#mediation analyses
createfmla <- function(yvar, xvars) {
rhs <- paste(xvars, collapse=" + ")
return(as.formula(paste(yvar, "~", rhs, sep=" ")))
}
createint <- function(Y,E,M) {
list <- NULL
for(i in 1:length(M)){
list <- c(list,paste(E,M[i], sep="*"))
}
rhs <- paste(list, collapse=" + ")
return(as.formula(paste(Y, "~", rhs, sep=" ")))
}
set.seed(12345)
#create dataset of lockdown states
d_l <- subset(d, state %in% c("AL","AK","AZ","CA","CO","CT","DE",
"FL","GA","HI","ID","IL","IN","DC",
"KS","KY","LA","ME","MD","MA","MI",
"MN","MT","MS","MO","NV","NH","NJ",
"NM","NY","NC","OH","OK","OR","PA",
"RI","SC","TN","TX","VA","VT","WA",
"WV","WI"))
list(max(d_l$Series_Complete_Pop_Pct,na.rm=TRUE), max(d_l$work,na.rm=TRUE))
list(quantile(d_l$Series_Complete_Pop_Pct,0.90,na.rm=TRUE), quantile(d_l$work,0.90,na.rm=TRUE))
list(quantile(d_l$Series_Complete_Pop_Pct,0.75,na.rm=TRUE), quantile(d_l$work,0.75,na.rm=TRUE))
list(quantile(d_l$Series_Complete_Pop_Pct,0.50,na.rm=TRUE), quantile(d_l$work,0.50,na.rm=TRUE))
#####Association of poverty rate with COVID-19 deaths#####
#adjusted for PropMale, PropAbove65, no.college.diploma, race/ethnicity, state fixed effects
createfmla <- function(yvar, xvars) {
rhs <- paste(xvars, collapse=" + ")
return(as.formula(paste(yvar, "~", rhs, sep=" ")))
}
reg = glm(createfmla(Y, c(E,C)), family = gaussian(link="identity"), data = d_l)
summary(reg)
coef(reg)['pctPoverty']
reg.beta <- coef(reg)
reg.SE <- coef(summary(reg))[, 2]
reg.lcl <- reg.beta - qnorm(0.975) * reg.SE
reg.ucl <- reg.beta + qnorm(0.975) * reg.SE
reg.ucl <- reg.beta + qnorm(0.975) * reg.SE
cbind(reg.beta,reg.lcl,reg.ucl)[2,]*10 #change in covid deaths per 100,000 for every 10% increase in poverty
reg = glm(createfmla(Y, c(M,C)), family = gaussian(link="identity"), data = d_l)
summary(reg)
reg = glm(createfmla(M, c(E,C)), family = gaussian(link="identity"), data = d_l)
summary(reg)
set.seed(12345)
#g-formula approach
###both mediators
#max values
mval.list <- list()
mval.list <- list(max(d_l$Series_Complete_Pop_Pct, na.rm=TRUE), max(d_l$work, na.rm=TRUE))
fit_l <- cmest(
data=d_l, model="gformula",
outcome = Y, exposure = E, mediator = M, basec = C,
yreg="linear", mreg=rep(list("linear"),length(M)),
astar = median(d_l$pctPoverty), a = median(d_l$pctPoverty)+10,
EMint=TRUE,
mval = mval.list,
estimation = "imputation", multimp = TRUE, m=3,
inference = "bootstrap", nboot = 1000)
###do the results hold after including health-related factors and unemployment among the confounders?
#Variable selection
set.seed(12345)
Y = "deaths"
E = "pctPoverty"
M = c(
#"Smokers_Percentage",
#"DiabetesPercentage",
#"obesity",
#"MedianAge2010",
#"dem_to_rep_ratio",
#"SVIPercentile",
#"HPSAShortage",
#"ICUBeds",
#"Hospitals",
#"X..Unemployed",
#"X..Uninsured",
#"MaskUsage",
#"Booster_Doses_Vax_Pct",
"Series_Complete_Pop_Pct",
#"transit_2020",
#"rec_2020",
#"work_2020",
#"transit",
#"rec",
"work"
)
C = c("PropMale",
"PropAbove65",
"no.college.diploma",
"native",
"asian",
"black",
"white",
"hispanic",
"state",
"Smokers_Percentage",
"DiabetesPercentage",
"obesity"#,
#"MedianAge2010",
#"dem_to_rep_ratio",
#"SVIPercentile",
#"HPSAShortage",
#"ICUBeds",
#"Hospitals",
#"X..Unemployed"#,
#"X..Uninsured",
#"MaskUsage",
#"Booster_Doses_Vax_Pct",
#"Series_Complete_Pop_Pct",
#"transit_2020",
#"rec_2020",
#"work_2020",
#"transit",
#"rec",
#"work"
) ###consider using work_2020 with state fixed effects, to account for differences in lockdown policy by state
d = sdf[c("fips",Y,E,M,C,"state")]
#remove counties with unavailable mobility variable
#d <- d[is.na(d$work)==FALSE,]
#####Mediation analysis#####
#ref1: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4287269/
#ref2: https://www.igaku-shoin.co.jp/paper/archive/y2021/3447_06#annot
#ref2 code: https://www.igaku-shoin.co.jp/application/files/5216/3781/4240/9R.txt
## CMAverse package
# https://bs1125.github.io/CMAverse/articles/multiple_mediators.html
#DAG
pdf(sprintf("%s/figures/dag.pdf",rootdir), width=9, height=6)
cmdag(outcome = Y, exposure = E, mediator = M, basec = C,
postc=NULL, node=TRUE, text_col="white")
dev.off()
#mediation analyses
createfmla <- function(yvar, xvars) {
rhs <- paste(xvars, collapse=" + ")
return(as.formula(paste(yvar, "~", rhs, sep=" ")))
}
createint <- function(Y,E,M) {
list <- NULL
for(i in 1:length(M)){
list <- c(list,paste(E,M[i], sep="*"))
}
rhs <- paste(list, collapse=" + ")
return(as.formula(paste(Y, "~", rhs, sep=" ")))
}
set.seed(12345)
#create dataset of lockdown states
d_l <- subset(d, state %in% c("AL","AK","AZ","CA","CO","CT","DE",
"FL","GA","HI","ID","IL","IN","DC", #DC data unavailable
"KS","KY","LA","ME","MD","MA","MI",
"MN","MT","MS","MO","NV","NH","NJ",
"NM","NY","NC","OH","OK","OR","PA",
"RI","SC","TN","TX","VA","VT","WA",
"WV","WI"))
# #create dataset non-lockdown states
# #for states with no stay-at-home orders, we set dates of stay-at-home order to be from April 1 to April 30, 2020
# d_nl <- subset(d, state %in% c("AR","IA","NE","ND","SD","UT","WY"))
list(max(d_l$Series_Complete_Pop_Pct,na.rm=TRUE), max(d_l$work,na.rm=TRUE))
list(quantile(d_l$Series_Complete_Pop_Pct,0.90,na.rm=TRUE), quantile(d_l$work,0.90,na.rm=TRUE))
list(quantile(d_l$Series_Complete_Pop_Pct,0.75,na.rm=TRUE), quantile(d_l$work,0.75,na.rm=TRUE))
list(quantile(d_l$Series_Complete_Pop_Pct,0.50,na.rm=TRUE), quantile(d_l$work,0.50,na.rm=TRUE))
#####Association of percent poverty with COVID-19 deaths#####
#adjusted for PropMale, PropAbove65, no.college.diploma
createfmla <- function(yvar, xvars) {
rhs <- paste(xvars, collapse=" + ")
return(as.formula(paste(yvar, "~", rhs, sep=" ")))
}
reg = glm(createfmla(Y, c(E,C)), family = gaussian(link="identity"), data = d_l)
summary(reg)
coef(reg)['pctPoverty']
reg.beta <- coef(reg)
reg.SE <- coef(summary(reg))[, 2]
reg.lcl <- reg.beta - qnorm(0.975) * reg.SE
reg.ucl <- reg.beta + qnorm(0.975) * reg.SE
reg.ucl <- reg.beta + qnorm(0.975) * reg.SE
cbind(reg.beta,reg.lcl,reg.ucl)[2,]
reg = glm(createfmla(Y, c(M,C)), family = gaussian(link="identity"), data = d_l)
summary(reg)
reg = glm(createfmla(M, c(E,C)), family = gaussian(link="identity"), data = d_l)
summary(reg)
set.seed(12345)
#g-formula approach
###For lockdown states
#max values
mval.list <- list()
# for(i in 1:length(M)){
#   mval.list <- c(mval.list, median(d[,M[i]], na.rm=TRUE)) #also consider max,median, mean, or 0 (for binary)
#   }
mval.list <- list(max(d_l$Series_Complete_Pop_Pct, na.rm=TRUE), max(d_l$work, na.rm=TRUE)) #set vaccination rate to max and work to maximum
fit_l <- cmest(
data=d_l, model="gformula",
outcome = Y, exposure = E, mediator = M, basec = C,
yreg="linear", mreg=rep(list("linear"),length(M)),
astar = median(d_l$pctPoverty), a = median(d_l$pctPoverty)+10,
EMint=TRUE,
mval = mval.list,
estimation = "imputation", multimp = TRUE, m=3,
inference = "bootstrap", nboot = 1000)
res_mediation_sup_max <- data.frame(
"X" = c("Total effect", "Controlled direct effect", "Proportion eliminated"),
"Effect" =
round(c(summary(fit_l)$effect.pe["te"],summary(fit_l)$effect.pe["cde"],summary(fit_l)$effect.pe["pe"]),2),
"Lower CL" =
round(c(summary(fit_l)$effect.ci.low["te"],summary(fit_l)$effect.ci.low["cde"],summary(fit_l)$effect.ci.low["pe"]),2),
"Upper CL" =
round(c(summary(fit_l)$effect.ci.high["te"],summary(fit_l)$effect.ci.high["cde"],summary(fit_l)$effect.ci.high["pe"]),2),
"P-value" =
round(c(summary(fit_l)$effect.pval["te"],summary(fit_l)$effect.pval["cde"],summary(fit_l)$effect.pval["pe"]),2)
)
res_mediation_sup_max
res_mediation_sup_max %>%
gt() %>%
cols_label(
X = " ",
Lower.CL = "Lower CL",
Upper.CL = "Upper CL",
P.value = "P-value"
) %>% gt::gtsave(
filename = sprintf("%s/tables/sup_mediation_confounding_max.html",rootdir))
#90th percentile
mval.list <- list()
# for(i in 1:length(M)){
#   mval.list <- c(mval.list, median(d[,M[i]], na.rm=TRUE)) #also consider max,median, mean, or 0 (for binary)
#   }
mval.list <- list(quantile(d_l$Series_Complete_Pop_Pct,0.90,na.rm=TRUE), quantile(d_l$work,0.90,na.rm=TRUE)) #set vaccination rate to max and work to maximum
fit_l <- cmest(
data=d_l, model="gformula",
outcome = Y, exposure = E, mediator = M, basec = C,
yreg="linear", mreg=rep(list("linear"),length(M)),
astar = median(d_l$pctPoverty), a = median(d_l$pctPoverty)+10,
EMint=TRUE,
mval = mval.list,
estimation = "imputation", multimp = TRUE, m=3,
inference = "bootstrap", nboot = 1000)
res_mediation_sup_0.90 <- data.frame(
"X" = c("Total effect", "Controlled direct effect", "Proportion eliminated"),
"Effect" =
round(c(summary(fit_l)$effect.pe["te"],summary(fit_l)$effect.pe["cde"],summary(fit_l)$effect.pe["pe"]),2),
"Lower CL" =
round(c(summary(fit_l)$effect.ci.low["te"],summary(fit_l)$effect.ci.low["cde"],summary(fit_l)$effect.ci.low["pe"]),2),
"Upper CL" =
round(c(summary(fit_l)$effect.ci.high["te"],summary(fit_l)$effect.ci.high["cde"],summary(fit_l)$effect.ci.high["pe"]),2),
"P-value" =
round(c(summary(fit_l)$effect.pval["te"],summary(fit_l)$effect.pval["cde"],summary(fit_l)$effect.pval["pe"]),2)
)
res_mediation_sup_0.90 %>%
gt() %>%
cols_label(
X = " ",
Lower.CL = "Lower CL",
Upper.CL = "Upper CL",
P.value = "P-value"
) %>% gt::gtsave(
filename = sprintf("%s/tables/sup_mediation_confounding_0.90.html",rootdir))
#75th percentile
mval.list <- list()
# for(i in 1:length(M)){
#   mval.list <- c(mval.list, median(d[,M[i]], na.rm=TRUE)) #also consider max,median, mean, or 0 (for binary)
#   }
mval.list <- list(quantile(d_l$Series_Complete_Pop_Pct,0.75,na.rm=TRUE), quantile(d_l$work,0.75,na.rm=TRUE)) #set vaccination rate to max and work to maximum
fit_l <- cmest(
data=d_l, model="gformula",
outcome = Y, exposure = E, mediator = M, basec = C,
yreg="linear", mreg=rep(list("linear"),length(M)),
astar = median(d_l$pctPoverty), a = median(d_l$pctPoverty)+10,
EMint=TRUE,
mval = mval.list,
estimation = "imputation", multimp = TRUE, m=3,
inference = "bootstrap", nboot = 1000)
res_mediation_sup_0.75 <- data.frame(
"X" = c("Total effect", "Controlled direct effect", "Proportion eliminated"),
"Effect" =
round(c(summary(fit_l)$effect.pe["te"],summary(fit_l)$effect.pe["cde"],summary(fit_l)$effect.pe["pe"]),2),
"Lower CL" =
round(c(summary(fit_l)$effect.ci.low["te"],summary(fit_l)$effect.ci.low["cde"],summary(fit_l)$effect.ci.low["pe"]),2),
"Upper CL" =
round(c(summary(fit_l)$effect.ci.high["te"],summary(fit_l)$effect.ci.high["cde"],summary(fit_l)$effect.ci.high["pe"]),2),
"P-value" =
round(c(summary(fit_l)$effect.pval["te"],summary(fit_l)$effect.pval["cde"],summary(fit_l)$effect.pval["pe"]),2)
)
res_mediation_sup_0.75 %>%
gt() %>%
cols_label(
X = " ",
Lower.CL = "Lower CL",
Upper.CL = "Upper CL",
P.value = "P-value"
) %>% gt::gtsave(
filename = sprintf("%s/tables/sup_mediation_confounding_0.75.html",rootdir))
#median values
mval.list <- list()
# for(i in 1:length(M)){
#   mval.list <- c(mval.list, median(d[,M[i]], na.rm=TRUE)) #also consider max,median, mean, or 0 (for binary)
#   }
mval.list <- list(median(d_l$Series_Complete_Pop_Pct, na.rm=TRUE), median(d_l$work, na.rm=TRUE)) #set vaccination rate to max and work to maximum
fit_l <- cmest(
data=d_l, model="gformula",
outcome = Y, exposure = E, mediator = M, basec = C,
yreg="linear", mreg=rep(list("linear"),length(M)),
astar = median(d_l$pctPoverty), a = median(d_l$pctPoverty)+10,
EMint=TRUE,
mval = mval.list,
estimation = "imputation", multimp = TRUE, m=3,
inference = "bootstrap", nboot = 1000)
res_mediation_sup_median <- data.frame(
"X" = c("Total effect", "Controlled direct effect", "Proportion eliminated"),
"Effect" =
round(c(summary(fit_l)$effect.pe["te"],summary(fit_l)$effect.pe["cde"],summary(fit_l)$effect.pe["pe"]),2),
"Lower CL" =
round(c(summary(fit_l)$effect.ci.low["te"],summary(fit_l)$effect.ci.low["cde"],summary(fit_l)$effect.ci.low["pe"]),2),
"Upper CL" =
round(c(summary(fit_l)$effect.ci.high["te"],summary(fit_l)$effect.ci.high["cde"],summary(fit_l)$effect.ci.high["pe"]),2),
"P-value" =
round(c(summary(fit_l)$effect.pval["te"],summary(fit_l)$effect.pval["cde"],summary(fit_l)$effect.pval["pe"]),2)
)
res_mediation_sup_median
res_mediation_sup_median %>%
gt() %>%
cols_label(
X = " ",
Lower.CL = "Lower CL",
Upper.CL = "Upper CL",
P.value = "P-value"
) %>% gt::gtsave(
filename = sprintf("%s/tables/sup_mediation_confounding_0.5.html",rootdir))
###changing work and vaccination rate
vax <- NULL
work <- NULL
pe_combined_sup <- NULL
median_vax = median(d_l$Series_Complete_Pop_Pct, na.rm=TRUE)
max_vax = max(d_l$Series_Complete_Pop_Pct, na.rm=TRUE)
median_work = median(d_l$work,na.rm=TRUE)
max_work = max(d_l$work,na.rm=TRUE)
n<-1
for (j in seq(median_vax,max_vax,by=1)){
for (i in seq(median_work,max_work,by=1)){
mval.list_combined <- list()
mval.list_combined <- list(j,i) #change vaccination rate from min to max and change combined from minimum to maximum
fit_l_combined <- cmest(
data=d_l, model="gformula",
outcome = Y, exposure = E, mediator = M, basec = C,
yreg="linear", mreg=rep(list("linear"),length(M)),
astar = median(d_l$pctPoverty), a = median(d_l$pctPoverty)+10,
EMint=TRUE,
mval = mval.list_combined,
estimation = "imputation", multimp = TRUE, m=3,
inference = "bootstrap", nboot = 1)
vax[n] = j
work[n] = i
pe_combined_sup[n] = summary(fit_l_combined)[9]$effect.pe["pe"]
n<-n+1
}
}
#to run RMD
# library(rmarkdown)
# rootdir <- system("git rev-parse --show-toplevel", intern=TRUE)[1]
# rmarkdown::render(paste(rootdir,"rmd/ses.Rmd", sep="/"))
options(knitr.table.format = function() {
if (knitr::is_latex_output()) 'latex' else 'pandoc'
})
if (knitr::is_latex_output()) {
knitr::opts_chunk$set(warning=FALSE, message=FALSE, echo=FALSE)
}
library(lfe)
library(stargazer)
library(knitr)
library(plm)
library(latex2exp)
library(ggplot2)
library(ggthemes)
library(mvtnorm)
library(kableExtra)
library(data.table)
library(readxl)
library(dplyr)
library(dotwhisker)
library(latex2exp)
library(parallel)
library(geepack)
library(CMAverse)
library(ggpubr)
library(randomForest)
library(mlbench)
library(caret)
library(e1071)
library(missForest)
library(gtsummary)
library(knitr)
library(gt)
detectCores()
rootdir <- system("git rev-parse --show-toplevel", intern=TRUE)[1]
source(paste(rootdir,"R/countyData.R",sep="/"))
options(timeout=2000)
sdf <- countyData(redo=FALSE) #set redo=TRUE to update
sdf <- countyData(redo=FALSE) #set redo=TRUE to update
rootdir
#to run RMD
#library(rmarkdown)
rootdir <- system("git rev-parse --show-toplevel", intern=TRUE)[1]
rmarkdown::render(paste(rootdir,"rmd/sna_isolation.Rmd", sep="/"))
rmarkdown::render(paste(rootdir,"rmd/oregon.Rmd", sep="/"))
load("cfmodel.RData")
load(paste(rootdir,"rmd/cfmodel.RData"))
load(paste(rootdir,"rmd/cfmodel.RData"),sep="/")
load(paste(rootdir,"rmd/cfmodel.RData",sep="/"))
cf.dep.scr
predict(cf.dep.scr)
cf.dep.scr(1)
X.dep.scr
predict(cf.dep.scr, X.dep.scr)
predict(cf.dep.scr, X.dep.scr)$predictions
colnames(X.dep.scr)
summary(X.dep.scr)
summary(X.dep.scr)
table(sample$gender_inp)
table(sample.dep.scr.cf$gender_inp)
table(sample.dep.scr.cf$gender)
summary(sample.dep.scr.cf)
merge(sample.dep.scr.cf, sample, by="person_id")
merge(sample.dep.scr.cf, sample, by="person_id")$gender
merge(sample.dep.scr.cf, sample, by="person_id")$gender_inp
table(merge(sample.dep.scr.cf, sample, by="person_id")$gender_inp)
4396+5669+3
summary(X.dep.scr)
predict(cf.dep.scr,0)
colnames(X.dep.scr)
(2,3,4)
[2,3,4]
2:4
2:4[1]
class(2:4)
data.frame(2:4)
as.matrix(2:4)
t(data.frame(2:4))
